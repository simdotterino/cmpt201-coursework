#include <unistd.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define HEAP_SIZE 256
#define BLOCK_SIZE 128
#define BUF_SIZE 64

void print_out(char *format, void *data, size_t data_size){

  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format, data_size == sizeof(uint64_t) ? *(uint64_t *)data :
      *(void **)data);
  if (len < 0){
    perror("snprintf failed");
  }

  write(STDOUT_FILENO, buf, len);

}


void *sbrk(intptr_t increment);

struct header{
  uint64_t size;
  struct header* next;
};


void print_contents(char *block_start){

for (int i = 0; i < BLOCK_SIZE; i++){


  write(STDOUT_FILENO, (block_start+i), sizeof((block_start+i)));
  write(STDOUT_FILENO, "\n", 1);

}

}





int main() {

  char *heap_start = sbrk(0); //gives the address of the heap's start
                              //
  if (sbrk(HEAP_SIZE) == (void *)-1) { //attempt to increase heap by 256 bytes


    perror("sbrk failed");

  }

  struct header *block1 = (struct header *)heap_start; //initialize the first block
  block1->size = BLOCK_SIZE;
  block1->next = NULL;
  memset(heap_start, 0, BLOCK_SIZE);

  char *next_address =  heap_start + BLOCK_SIZE; //initialize the second block
  struct header *block2 = (struct header *)next_address;
  block2->size = BLOCK_SIZE;
  block2->next = block1;
  memset(next_address, 1, BLOCK_SIZE);


  print_out("first block:%p\t", heap_start, sizeof(heap_start));
  print_out("%p\nsecond block:%p\t", next_address, sizeof(next_address));
  print_out("%p\nfirst block size:%p\t", &block1->size, sizeof(block1->size));
  print_out("%p\nfirst block next:%p\t", block1->next, sizeof(block1->next));
  print_out("%p\nsecond block size:%p\t", &block2->size, sizeof(block2->size)); 
  print_out("%p\nsecond block next:%p\t", block2->next, sizeof(block2->next));

  print_contents(heap_start);
  print_contents(next_address);



}
